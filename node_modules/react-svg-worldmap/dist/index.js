import React, { useState, createRef } from "react";
import { geoMercator, geoPath } from "d3-geo";
import geoData from "./countries.geo";
import { defaultColor, defaultSize, heightRatio, defaultCountryStyle, defaultTooltip, } from "./constants";
import { useWindowWidth, responsify } from "./utils";
import { drawTooltip } from "./draw";
import Frame from "./components/Frame";
import Region from "./components/Region";
import TextLabel from "./components/TextLabel";
export default function WorldMap(props) {
    const { data, title, valuePrefix = "", valueSuffix = "", color = defaultColor, strokeOpacity = 0.2, backgroundColor = "white", tooltipBgColor = "black", tooltipTextColor = "white", size = defaultSize, frame = false, frameColor = "black", borderColor = "black", richInteraction = false, styleFunction = defaultCountryStyle(borderColor, strokeOpacity), tooltipTextFunction = defaultTooltip, onClickFunction, hrefFunction, textLabelFunction = () => [], } = props;
    const windowWidth = useWindowWidth();
    const width = typeof size === "number" ? size : responsify(size, windowWidth);
    const height = width * heightRatio;
    const [scale, setScale] = useState(1);
    const [translateX, setTranslateX] = useState(0);
    const [translateY, setTranslateY] = useState(0);
    const containerRef = createRef();
    const countryValueMap = Object.fromEntries(data.map(({ country, value }) => [country.toUpperCase(), value]));
    const minValue = Math.min(...data.map(({ value }) => value));
    const maxValue = Math.max(...data.map(({ value }) => value));
    const projection = geoMercator();
    const pathGenerator = geoPath().projection(projection);
    const onClick = React.useCallback((context) => (event) => onClickFunction === null || onClickFunction === void 0 ? void 0 : onClickFunction(Object.assign(Object.assign({}, context), { event })), [onClickFunction]);
    const regions = geoData.features.map((feature) => {
        const triggerRef = createRef();
        const { I: isoCode, N: countryName, C: coordinates } = feature;
        const geoFeature = {
            type: "Feature",
            properties: { NAME: countryName, ISO_A2: isoCode },
            geometry: {
                type: "MultiPolygon",
                coordinates: coordinates,
            },
        };
        const context = {
            countryCode: isoCode,
            countryValue: countryValueMap[isoCode],
            countryName,
            color,
            minValue,
            maxValue,
            prefix: valuePrefix,
            suffix: valueSuffix,
        };
        const path = (React.createElement(Region, { ref: triggerRef, d: pathGenerator(geoFeature), style: styleFunction(context), onClick: onClick(context), strokeOpacity: strokeOpacity, href: hrefFunction === null || hrefFunction === void 0 ? void 0 : hrefFunction(context), key: countryName }));
        const tooltip = drawTooltip(typeof context.countryValue === "undefined"
            ? undefined
            : tooltipTextFunction(context), tooltipBgColor, tooltipTextColor, triggerRef, containerRef);
        return { path, highlightedTooltip: tooltip };
    });
    const regionPaths = regions.map((entry) => entry.path);
    const regionTooltips = regions.map((entry) => entry.highlightedTooltip);
    const eventHandlers = {
        onMouseDown(e) {
            e.preventDefault();
            e.stopPropagation();
        },
        onDoubleClick(e) {
            const rect = e.currentTarget.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            if (scale === 4) {
                setTranslateX(0);
                setTranslateY(0);
                setScale(1);
            }
            else {
                setTranslateX(2 * translateX - x);
                setTranslateY(2 * translateY - y);
                setScale(scale * 2);
            }
        },
    };
    return (React.createElement("figure", { className: "worldmap__figure-container", style: { backgroundColor } },
        title && (React.createElement("figcaption", { className: "worldmap__figure-caption" }, title)),
        React.createElement("svg", Object.assign({ ref: containerRef, height: `${height}px`, width: `${width}px` }, (richInteraction ? eventHandlers : undefined)),
            frame && React.createElement(Frame, { color: frameColor }),
            React.createElement("g", { transform: `translate(${translateX}, ${translateY}) scale(${(width / 960) * scale}) translate(0, 240)`, style: { transition: "all 0.2s" } }, regionPaths),
            React.createElement("g", null, textLabelFunction(width).map((labelProps) => (React.createElement(TextLabel, Object.assign({}, labelProps, { key: labelProps.label }))))),
            regionTooltips)));
}
export { WorldMap };
