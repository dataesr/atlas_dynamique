{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\haallat\\\\Documents\\\\atlas_dynamique\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PathTooltip = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = tslib_1.__importStar(require(\"react\"));\n\nexports.PathTooltip = function (props) {\n  var _react_1$useState = react_1.useState(true),\n      _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n      hidden = _react_1$useState2[0],\n      setHidden = _react_1$useState2[1];\n\n  var _react_1$useState3 = react_1.useState({\n    x: 0,\n    y: 0,\n    w: 0,\n    h: 0,\n    isLeft: false,\n    isTop: false\n  }),\n      _react_1$useState4 = _slicedToArray(_react_1$useState3, 2),\n      tooltipRect = _react_1$useState4[0],\n      setTooltipRect = _react_1$useState4[1];\n\n  var _react_1$useState5 = react_1.useState(props[\"fontSize\"] || 12),\n      _react_1$useState6 = _slicedToArray(_react_1$useState5, 1),\n      fontSize = _react_1$useState6[0];\n\n  var _react_1$useState7 = react_1.useState(props[\"fontFamily\"] || \"sans-serif\"),\n      _react_1$useState8 = _slicedToArray(_react_1$useState7, 1),\n      fontFamily = _react_1$useState8[0];\n\n  var _react_1$useState9 = react_1.useState(props[\"bgColor\"] || \"black\"),\n      _react_1$useState10 = _slicedToArray(_react_1$useState9, 1),\n      bgColor = _react_1$useState10[0];\n\n  var _react_1$useState11 = react_1.useState(props[\"textColor\"] || \"white\"),\n      _react_1$useState12 = _slicedToArray(_react_1$useState11, 1),\n      textColor = _react_1$useState12[0];\n\n  var pathRef = props.pathRef;\n  var svgRef = props.svgRef;\n  var textRef = react_1.createRef();\n  react_1.useEffect(function () {\n    var updateTooltip = function updateTooltip(e) {\n      if (svgRef && pathRef && textRef && svgRef.current && pathRef.current && textRef.current) {\n        var svgRect = svgRef.current.getBoundingClientRect();\n        var textRect = textRef.current.getBoundingClientRect();\n        var isLeft = e.x - svgRect.x > svgRect.width / 2;\n        var isTop = e.y - svgRect.y > svgRect.height / 2;\n        var w = textRect.width + 20;\n        var h = textRect.height + 20;\n        var x = isLeft ? e.x - svgRect.x + 8 - w : e.x - svgRect.x - 8;\n        var y = isTop ? e.y - svgRect.y - 12 - h : e.y - svgRect.y + 8;\n        setTooltipRect({\n          x: x,\n          y: y,\n          w: w,\n          h: h,\n          isLeft: isLeft,\n          isTop: isTop\n        });\n      }\n    };\n\n    if (pathRef && pathRef.current) {\n      pathRef.current.addEventListener('mouseover', function () {\n        setHidden(false);\n      });\n      pathRef.current.addEventListener('mouseleave', function () {\n        setHidden(true);\n      });\n      pathRef.current.addEventListener('mousemove', function (e) {\n        if (!hidden) updateTooltip(e);\n      });\n    }\n  }, [pathRef, svgRef, textRef, hidden]);\n  var bottomRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + 30).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + 22).toString() + \",\" + tooltipRect.y.toString();\n  var bottomLeft = (tooltipRect.x + tooltipRect.w - 8).toString() + \",\" + (tooltipRect.y - 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 25).toString() + \",\" + tooltipRect.y.toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + tooltipRect.y.toString();\n  var topRight = (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString();\n  var topLeft = (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h + 10).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 15).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString() + \" \" + (tooltipRect.x + tooltipRect.w - 7).toString() + \",\" + (tooltipRect.y + tooltipRect.h).toString();\n  var points = tooltipRect.isLeft && tooltipRect.isTop ? topLeft : tooltipRect.isTop ? topRight : tooltipRect.isLeft ? bottomLeft : bottomRight;\n\n  var findSpaceBeforeThreshold = function findSpaceBeforeThreshold(inputString, threshold) {\n    var i = 0;\n    var temp = -1;\n\n    if (inputString.length <= threshold) {\n      return [\"\", inputString];\n    }\n\n    while (i <= inputString.length && i <= threshold) {\n      if (inputString[i] === \" \") {\n        temp = i;\n      }\n\n      i++;\n    }\n\n    return temp !== -1 ? [inputString.slice(0, temp), inputString.slice(temp + 1)] : [inputString.slice(0, threshold), inputString.slice(threshold + 1)];\n  };\n\n  var tips = [];\n  var startTip = findSpaceBeforeThreshold(props.tip, 35 - (1 * fontSize - 11));\n  tips.push(startTip[0]);\n  var interimTip = startTip[1];\n  var leftover = startTip[1];\n\n  while (interimTip !== \"\") {\n    var currTip = findSpaceBeforeThreshold(interimTip === leftover ? interimTip : leftover, 35 - (1 * fontSize - 11));\n    interimTip = currTip[0];\n    leftover = currTip[1];\n    tips.push(interimTip === \"\" ? currTip[1] : currTip[0]);\n  }\n\n  return react_1.default.createElement(\"g\", {\n    pointerEvents: \"none\"\n  }, react_1.default.createElement(\"rect\", {\n    x: tooltipRect.x,\n    y: tooltipRect.y,\n    width: tooltipRect.w,\n    rx: 5,\n    ry: 5,\n    height: tooltipRect.h,\n    fill: bgColor,\n    visibility: hidden ? \"hidden\" : \"visible\"\n  }), react_1.default.createElement(\"polygon\", {\n    fill: bgColor,\n    visibility: hidden ? \"hidden\" : \"visible\",\n    points: points\n  }), react_1.default.createElement(\"text\", {\n    ref: textRef,\n    x: tooltipRect.x + 10,\n    y: tooltipRect.y,\n    cursor: \"default\",\n    fontFamily: fontFamily,\n    fontSize: fontSize,\n    fill: textColor,\n    visibility: hidden ? \"hidden\" : \"visible\"\n  }, props.tip.length > 35 - 1 * (fontSize - 11) ? tips.map(function (tip, index) {\n    return react_1.default.createElement(\"tspan\", {\n      key: tip,\n      x: tooltipRect.x + 10,\n      y: tooltipRect.y + (20 + (1 * fontSize - 11)) + 20 * index\n    }, tip);\n  }) : react_1.default.createElement(\"tspan\", {\n    x: tooltipRect.x + 10,\n    y: tooltipRect.y + (20 + (1 * fontSize - 11))\n  }, props.tip)));\n};","map":null,"metadata":{},"sourceType":"script"}