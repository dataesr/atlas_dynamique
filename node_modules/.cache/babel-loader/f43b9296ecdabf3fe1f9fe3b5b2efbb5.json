{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\haallat\\\\Documents\\\\atlas_dynamique\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\haallat\\\\Documents\\\\atlas_dynamique\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useState, createRef } from \"react\";\nimport { geoMercator, geoPath } from \"d3-geo\";\nimport geoData from \"./countries.geo\";\nimport { defaultColor, defaultSize, heightRatio, defaultCountryStyle, defaultTooltip } from \"./constants\";\nimport { useWindowWidth, responsify } from \"./utils\";\nimport { drawTooltip } from \"./draw\";\nimport Frame from \"./components/Frame\";\nimport Region from \"./components/Region\";\nimport TextLabel from \"./components/TextLabel\";\nexport default function WorldMap(props) {\n  var data = props.data,\n      title = props.title,\n      _props$valuePrefix = props.valuePrefix,\n      valuePrefix = _props$valuePrefix === void 0 ? \"\" : _props$valuePrefix,\n      _props$valueSuffix = props.valueSuffix,\n      valueSuffix = _props$valueSuffix === void 0 ? \"\" : _props$valueSuffix,\n      _props$color = props.color,\n      color = _props$color === void 0 ? defaultColor : _props$color,\n      _props$strokeOpacity = props.strokeOpacity,\n      strokeOpacity = _props$strokeOpacity === void 0 ? 0.2 : _props$strokeOpacity,\n      _props$backgroundColo = props.backgroundColor,\n      backgroundColor = _props$backgroundColo === void 0 ? \"white\" : _props$backgroundColo,\n      _props$tooltipBgColor = props.tooltipBgColor,\n      tooltipBgColor = _props$tooltipBgColor === void 0 ? \"black\" : _props$tooltipBgColor,\n      _props$tooltipTextCol = props.tooltipTextColor,\n      tooltipTextColor = _props$tooltipTextCol === void 0 ? \"white\" : _props$tooltipTextCol,\n      _props$size = props.size,\n      size = _props$size === void 0 ? defaultSize : _props$size,\n      _props$frame = props.frame,\n      frame = _props$frame === void 0 ? false : _props$frame,\n      _props$frameColor = props.frameColor,\n      frameColor = _props$frameColor === void 0 ? \"black\" : _props$frameColor,\n      _props$borderColor = props.borderColor,\n      borderColor = _props$borderColor === void 0 ? \"black\" : _props$borderColor,\n      _props$richInteractio = props.richInteraction,\n      richInteraction = _props$richInteractio === void 0 ? false : _props$richInteractio,\n      _props$styleFunction = props.styleFunction,\n      styleFunction = _props$styleFunction === void 0 ? defaultCountryStyle(borderColor, strokeOpacity) : _props$styleFunction,\n      _props$tooltipTextFun = props.tooltipTextFunction,\n      tooltipTextFunction = _props$tooltipTextFun === void 0 ? defaultTooltip : _props$tooltipTextFun,\n      onClickFunction = props.onClickFunction,\n      hrefFunction = props.hrefFunction,\n      _props$textLabelFunct = props.textLabelFunction,\n      textLabelFunction = _props$textLabelFunct === void 0 ? function () {\n    return [];\n  } : _props$textLabelFunct;\n  var windowWidth = useWindowWidth();\n  var width = typeof size === \"number\" ? size : responsify(size, windowWidth);\n  var height = width * heightRatio;\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      scale = _useState2[0],\n      setScale = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      translateX = _useState4[0],\n      setTranslateX = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      translateY = _useState6[0],\n      setTranslateY = _useState6[1];\n\n  var containerRef = createRef();\n  var countryValueMap = Object.fromEntries(data.map(function (_ref) {\n    var country = _ref.country,\n        value = _ref.value;\n    return [country.toUpperCase(), value];\n  }));\n  var minValue = Math.min.apply(Math, _toConsumableArray(data.map(function (_ref2) {\n    var value = _ref2.value;\n    return value;\n  })));\n  var maxValue = Math.max.apply(Math, _toConsumableArray(data.map(function (_ref3) {\n    var value = _ref3.value;\n    return value;\n  })));\n  var projection = geoMercator();\n  var pathGenerator = geoPath().projection(projection);\n  var onClick = React.useCallback(function (context) {\n    return function (event) {\n      return onClickFunction === null || onClickFunction === void 0 ? void 0 : onClickFunction(Object.assign(Object.assign({}, context), {\n        event: event\n      }));\n    };\n  }, [onClickFunction]);\n  var regions = geoData.features.map(function (feature) {\n    var triggerRef = createRef();\n    var isoCode = feature.I,\n        countryName = feature.N,\n        coordinates = feature.C;\n    var geoFeature = {\n      type: \"Feature\",\n      properties: {\n        NAME: countryName,\n        ISO_A2: isoCode\n      },\n      geometry: {\n        type: \"MultiPolygon\",\n        coordinates: coordinates\n      }\n    };\n    var context = {\n      countryCode: isoCode,\n      countryValue: countryValueMap[isoCode],\n      countryName: countryName,\n      color: color,\n      minValue: minValue,\n      maxValue: maxValue,\n      prefix: valuePrefix,\n      suffix: valueSuffix\n    };\n    var path = React.createElement(Region, {\n      ref: triggerRef,\n      d: pathGenerator(geoFeature),\n      style: styleFunction(context),\n      onClick: onClick(context),\n      strokeOpacity: strokeOpacity,\n      href: hrefFunction === null || hrefFunction === void 0 ? void 0 : hrefFunction(context),\n      key: countryName\n    });\n    var tooltip = drawTooltip(typeof context.countryValue === \"undefined\" ? undefined : tooltipTextFunction(context), tooltipBgColor, tooltipTextColor, triggerRef, containerRef);\n    return {\n      path: path,\n      highlightedTooltip: tooltip\n    };\n  });\n  var regionPaths = regions.map(function (entry) {\n    return entry.path;\n  });\n  var regionTooltips = regions.map(function (entry) {\n    return entry.highlightedTooltip;\n  });\n  var eventHandlers = {\n    onMouseDown: function onMouseDown(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    onDoubleClick: function onDoubleClick(e) {\n      var rect = e.currentTarget.getBoundingClientRect();\n      var x = e.clientX - rect.left;\n      var y = e.clientY - rect.top;\n\n      if (scale === 4) {\n        setTranslateX(0);\n        setTranslateY(0);\n        setScale(1);\n      } else {\n        setTranslateX(2 * translateX - x);\n        setTranslateY(2 * translateY - y);\n        setScale(scale * 2);\n      }\n    }\n  };\n  return React.createElement(\"figure\", {\n    className: \"worldmap__figure-container\",\n    style: {\n      backgroundColor: backgroundColor\n    }\n  }, title && React.createElement(\"figcaption\", {\n    className: \"worldmap__figure-caption\"\n  }, title), React.createElement(\"svg\", Object.assign({\n    ref: containerRef,\n    height: \"\".concat(height, \"px\"),\n    width: \"\".concat(width, \"px\")\n  }, richInteraction ? eventHandlers : undefined), frame && React.createElement(Frame, {\n    color: frameColor\n  }), React.createElement(\"g\", {\n    transform: \"translate(\".concat(translateX, \", \").concat(translateY, \") scale(\").concat(width / 960 * scale, \") translate(0, 240)\"),\n    style: {\n      transition: \"all 0.2s\"\n    }\n  }, regionPaths), React.createElement(\"g\", null, textLabelFunction(width).map(function (labelProps) {\n    return React.createElement(TextLabel, Object.assign({}, labelProps, {\n      key: labelProps.label\n    }));\n  })), regionTooltips));\n}\nexport { WorldMap };","map":null,"metadata":{},"sourceType":"module"}